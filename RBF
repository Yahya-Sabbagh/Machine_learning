import numpy as np
import matplotlib.pyplot as plt
from matplotlib.colors import ListedColormap
from sklearn.datasets import make_blobs
from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix, classification_report
from sklearn.svm import SVC
from sklearn.metrics.pairwise import rbf_kernel

# ---------------------------------------------------------------
# FUNCTION: Confusion Matrix Plot
# ---------------------------------------------------------------
def plot_confusion_matrix(y_true, y_pred, cmap="coolwarm", subplot_position=111):
    """
    Display a confusion matrix in a subplot
    """
    cm = confusion_matrix(y_true, y_pred)
    plt.subplot(subplot_position)
    im = plt.imshow(cm, interpolation="nearest", cmap=cmap)
    plt.colorbar(im)

    # Overlay counts
    for i in range(cm.shape[0]):
        for j in range(cm.shape[1]):
            plt.text(j, i, cm[i, j], ha="center", va="center",
                     color="white" if cm[i, j] > cm.max() / 2 else "black",
                     fontsize=12, fontweight="bold")

    plt.xlabel("Predictions")
    plt.ylabel("True Classes")
    plt.title("Confusion Matrix")
    plt.xticks(np.arange(len(set(y_true))))
    plt.yticks(np.arange(len(set(y_true))))
    plt.tight_layout()

# ---------------------------------------------------------------
# 1. DATA GENERATION
# ---------------------------------------------------------------

# 5 classes
n_samples = 4000
a = 3
centers = [(-a, -a), (a, a), (a, -a), (-a, a), (0, 0)]
X, y = make_blobs(n_samples=n_samples, centers=centers, shuffle=False, random_state=42)

# Map to 3 main classes
y[y == 0] = 0
y[y == 1] = 0
y[y == 2] = 1
y[y == 3] = 1
y[y == 4] = 2

Nbclasses = y.max() + 1
centers = np.array(centers)

# Visualize dataset
colors = ['red', 'green', 'blue', 'yellow', 'cyan', 'magenta']
cmap1 = ListedColormap(colors[:Nbclasses])
plt.scatter(X[:, 0], X[:, 1], c=y, cmap=cmap1)
plt.title("Generated Data")
plt.show()

# ---------------------------------------------------------------
# 2. TRAIN/TEST SPLIT
# ---------------------------------------------------------------

X_train, X_test, y_train, y_test = train_test_split(X, y, stratify=y, test_size=0.4, random_state=42)

# ---------------------------------------------------------------
# 3. RBF KERNEL TRANSFORMATION + LINEAR SVM
# ---------------------------------------------------------------

gamma = 0.1
Z_train = rbf_kernel(X_train, centers, gamma=gamma)
Z_test = rbf_kernel(X_test, centers, gamma=gamma)

clf = SVC(C=1, kernel="linear", probability=True, tol=1e-3)
clf.fit(Z_train, y_train)

# ---------------------------------------------------------------
# 4. EVALUATION
# ---------------------------------------------------------------

predictions = clf.predict(Z_test)
score = clf.score(Z_test, y_test)

print("Confusion Matrix RBF-SVM:\n", confusion_matrix(y_test, predictions))
print("Accuracy:", score)
plot_confusion_matrix(y_test, predictions)
plt.show()

# ---------------------------------------------------------------
# 5. DECISION SURFACE + REJECT CLASS ("I don't know")
# ---------------------------------------------------------------

resolution = 0.1
x1_min, x1_max = X[:, 0].min() - 1, X[:, 0].max() + 1
x2_min, x2_max = X[:, 1].min() - 1, X[:, 1].max() + 1
xx1, xx2 = np.meshgrid(np.arange(x1_min, x1_max, resolution),
                       np.arange(x2_min, x2_max, resolution))

# Predict on grid
Z_grid = rbf_kernel(np.c_[xx1.ravel(), xx2.ravel()], centers, gamma=gamma)
Y_grid = clf.predict(Z_grid)

# Create “I don’t know” class based on probability threshold
probs = clf.predict_proba(Z_grid)
cpwi = probs.argmax(axis=1)
max_prob = probs.max(axis=1)
tpr = 0.7
cpwi[max_prob <= tpr] = Nbclasses  # Assign unknown class

# Plot decision surfaces
plt.figure(figsize=(12,5))

# Normal predictions
plt.subplot(1,2,1)
plt.scatter(xx1.ravel(), xx2.ravel(), c=Y_grid, cmap=cmap1, s=25, alpha=0.5)
plt.scatter(X_test[:, 0], X_test[:, 1], c=y_test, edgecolors='k')
plt.scatter(centers[:, 0], centers[:, 1], marker='X', s=40, color='m')
plt.title("Decision Surface without Reject Class")

# With “I don’t know” class
plt.subplot(1,2,2)
cmap_extended = ListedColormap(colors[:Nbclasses+1])
plt.scatter(xx1.ravel(), xx2.ravel(), c=cpwi, cmap=cmap_extended, s=25, alpha=0.5)
plt.scatter(X_test[:, 0], X_test[:, 1], c=y_test, edgecolors='k')
plt.scatter(centers[:, 0], centers[:, 1], marker='X', s=40, color='m')
plt.title("Decision Surface with Reject Class (Threshold=0.7)")

plt.show()

# Confusion matrix including “I don’t know”
Z_test_pred_probs = clf.predict_proba(Z_test)
cpwi_test = Z_test_pred_probs.argmax(axis=1)
max_prob_test = Z_test_pred_probs.max(axis=1)
cpwi_test[max_prob_test <= tpr] = Nbclasses
cm_reject = confusion_matrix(y_test, cpwi_test)
print("Confusion Matrix with Reject Class:\n", cm_reject)
print("Number of unclassified points:", cm_reject[:, -1].sum())
